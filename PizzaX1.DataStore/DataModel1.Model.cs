//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 1/4/2021 10:36:18 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Model
{

    public partial class Model : DbContext
    {

        public Model() :
            base()
        {
            OnCreated();
        }

        public Model(DbContextOptions<Model> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Pizza> Pizzas
        {
            get;
            set;
        }

        public virtual DbSet<Order> Orders
        {
            get;
            set;
        }

        public virtual DbSet<Stores> Stores
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.PizzaMapping(modelBuilder);
            this.CustomizePizzaMapping(modelBuilder);

            this.OrderMapping(modelBuilder);
            this.CustomizeOrderMapping(modelBuilder);

            this.StoresMapping(modelBuilder);
            this.CustomizeStoresMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Pizza Mapping

        private void PizzaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Pizza>().ToTable(@"Pizzas");
            modelBuilder.Entity<Pizza>().Property(x => x.unitcost).HasColumnName(@"unitcost").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pizza>().Property(x => x.count).HasColumnName(@"count").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pizza>().Property(x => x.size).HasColumnName(@"size").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pizza>().OwnsOne(t => t.toppingsType).Property(x => x.toppings).HasColumnName(@"toppings").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pizza>().Property(x => x.Name).HasColumnName(@"Name").ValueGeneratedNever();
            modelBuilder.Entity<Pizza>().Property(x => x.crust).HasColumnName(@"crust").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pizza>().Property(x => x.Size).HasColumnName(@"Size").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pizza>().Property(x => x.Property1).HasColumnName(@"Property1").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Pizza>().HasKey(@"Property1");
        }

        partial void CustomizePizzaMapping(ModelBuilder modelBuilder);

        #endregion

        #region Order Mapping

        private void OrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Order>().ToTable(@"Orders");
            modelBuilder.Entity<Order>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().Property(x => x.Address).HasColumnName(@"Address").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().Property(x => x.payment).HasColumnName(@"payment").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().Property(x => x.Stores).HasColumnName(@"Stores").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().OwnsOne(t => t.itemsType).Property(x => x.items).HasColumnName(@"items").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().Property(x => x.ordertime).HasColumnName(@"ordertime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().HasKey(@"Name", @"ordertime");
        }

        partial void CustomizeOrderMapping(ModelBuilder modelBuilder);

        #endregion

        #region Stores Mapping

        private void StoresMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Stores>().ToTable(@"Stores");
            modelBuilder.Entity<Stores>().Property(x => x.Address).HasColumnName(@"Address").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Stores>().Property(x => x.StoreNo).HasColumnName(@"StoreNo").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Stores>().Property(x => x.Name).HasColumnName(@"Name").ValueGeneratedNever();
            modelBuilder.Entity<Stores>().Property(x => x.ordertime).HasColumnName(@"ordertime").ValueGeneratedNever();
            modelBuilder.Entity<Stores>().HasKey(@"StoreNo");
        }

        partial void CustomizeStoresMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Pizza>().HasOne(x => x.Order).WithMany(op => op.Pizzas).HasForeignKey(@"Name").IsRequired(true);

            modelBuilder.Entity<Order>().HasMany(x => x.Pizzas).WithOne(op => op.Order).HasForeignKey(@"Name").IsRequired(true);
            modelBuilder.Entity<Order>().HasMany(x => x.Stores1).WithOne(op => op.Order).HasForeignKey(@"Name", @"ordertime").IsRequired(true);

            modelBuilder.Entity<Stores>().HasOne(x => x.Order).WithMany(op => op.Stores1).HasForeignKey(@"Name", @"ordertime").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
